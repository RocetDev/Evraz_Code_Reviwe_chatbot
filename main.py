import asyncio
from telebot.async_telebot import AsyncTeleBot
import zipfile
import os
import tempfile
import shutil

from PromptEngine import PEngine

# Config –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–ó –º–æ–¥–µ–ª–∏
model_api = '<Your input>'
api_key = "<Your input>"

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '<Yout input>'
bot = AsyncTeleBot(API_TOKEN)

propmt_engine = PEngine(model_api, api_key,)

@bot.message_handler(commands=['start'])
async def send_welcome(message):
    text= "–ü—Ä–∏–≤–µ—Ç! –Ø EvrazGPT! –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ). \
    –¢–∞–∫–∂–µ —è —É–º–µ—é –¥–µ–ª–∞—Ç—å **__Code Review__** –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ python. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ —Ñ–∞–∏–ª `.zip` –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Ç–≤–µ—á—É, –≥–¥–µ —É –≤–∞—Å –æ—à–∏–±–∫–∏. \
    –ï—Å–ª–∏ –≤–∞–º –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - –Ω–∞–ø–∏—à–∏—Ç–µ /help"
    await bot.reply_to(message=message, text=text, parse_mode='Markdown')


@bot.message_handler(commands=['help'])
async def send_help_message(message):
    text = '''
–û—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ª—å—é —á–∞—Ç –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ Python.
–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤–∑—è—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ `–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ Python` –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ï–í–†–ê–ó.
–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–≥–æ –≤ –≤–∏–¥–µ .zip –∞—Ä—Ö–∏–≤–∞. –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞, –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫, –ø—Ä–æ—Å—Ç–æ zip –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞.
–ù–æ, –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—Å—è —Å–æ –º–Ω–æ–π –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã ) –ê —è –ø–æ–ø—ã—Ç–∞—é—Å—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

–í–ù–ò–ú–ê–ù–ò–ï: –Ø –º–æ–≥—É –Ω–µ—Å—Ç–∏ –±—Ä–µ–¥, –Ω–µ –¥–æ–≤–µ—Ä—è–π—Ç–µ –º–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. –Ø –≥–ª—É–ø–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –∏ —Ç.–ø. —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –≤ Yandex –∏–ª–∏ Google –ø–æ–∏—Å–∫.
'''
    await bot.reply_to(message=message, text=text, parse_mode='Markdown')


@bot.message_handler(content_types=['text'])
async def handle_text(message):
    wait_text = "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...  üí≠ –ß—Ç–æ-–±–æ—Ç *EvraszGPT* –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
    sent_message = await bot.send_message(chat_id=message.chat.id, text=wait_text, parse_mode='Markdown')
    try:
        content = propmt_engine.custom_query(message.text)
        await bot.delete_message(message.chat.id, sent_message.message_id)
        await bot.send_message(chat_id=message.chat.id, text=content, parse_mode='Markdown')
    except Exception as e:
        await bot.send_message(message.chat.id, f"(1) –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: *{e}*. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "Markdown")


async def unzip_file(zip_filepath, extract_dir):
    with zipfile.ZipFile(zip_filepath, 'r') as zf:
        zf.extractall(extract_dir)


# async def walk_directory(directory: str):
#     """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
#     tree = {}
#     for root, dirs, files in os.walk(directory):
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–µ
#         current_node = tree
#         path_parts = root[len(directory):].strip(os.sep).split(os.sep)
#         for part in path_parts:
#             if part not in current_node:
#                 current_node[part] = {}
#             current_node = current_node[part]
#         # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
#         current_node["files"] = files
#     return tree

async def walk_directory(directory: str, indent=0):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞."""
    structure = ""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
        items = os.listdir(directory)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        items.sort()
        
        for item in items:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            full_path = os.path.join(directory, item)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            structure += ' ' * indent + '|-- ' + item + '\n'
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            if os.path.isdir(full_path):
                structure += await walk_directory(full_path, indent + 4)
    except PermissionError:
        structure += ' ' * indent + '|-- [Permission Denied]\n'
    except FileNotFoundError:
        structure += ' ' * indent + '|-- [File Not Found]\n'
    
    return structure


def is_zip_file(filename):
    if filename[-3:] == 'zip':
        return True
    return False

@bot.message_handler(content_types=['document'])
async def handle_codes(message):
    file_name = message.document.file_name
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    temp_dir = tempfile.mkdtemp(dir='FILES/')
    file_path = os.path.join(temp_dir, file_name)
    with open(file_path, 'wb') as f:
        f.write(downloaded_file)
    
    wait_text = "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...  üí≠ –ß—Ç–æ-–±–æ—Ç *EvraszGPT* –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
    sent_message = await bot.send_message(chat_id=message.chat.id, text=wait_text, parse_mode='Markdown')

    if not is_zip_file(file_name):
        await bot.delete_message(message.chat.id, sent_message.message_id)
        await bot.reply_to(message, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —ç—Ç–æ –Ω–µ *.zip* —Ñ–∞–π–ª")
        await shutil.rmtree(temp_dir, ignore_errors=True) 
    else:
        try:
            if sent_message.reply_to_message:
                await bot.delete_message(message.chat.id, sent_message.message_id)

            await unzip_file(file_path, temp_dir)
            os.remove(file_path)
            project_file = os.path.join(temp_dir, os.listdir(temp_dir)[0])
            tree = await walk_directory(project_file)
        
            content = propmt_engine.check_main_structure_dir(tree)
            await bot.delete_message(message.chat.id, sent_message.message_id)
            await bot.send_message(chat_id=message.chat.id, text=content, parse_mode='Markdown')
        except Exception as e:
            await bot.send_message(message.chat.id, f"(2) –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: *{e}*. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 'Markdown')

        shutil.rmtree(temp_dir, ignore_errors=True) 


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(bot.polling(none_stop=True))
