import telebot
import asyncio
from telebot.async_telebot import AsyncTeleBot
import requests
import json
import glob
import zipfile
import os
import tempfile
import shutil

from PromptEngine import PEngine


# https://habr.com/ru/companies/skillfactory/articles/837366/


# Config –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–ó –º–æ–¥–µ–ª–∏
model_api = '<Your url>'
api_key = "<Your api key>"

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '<Your token>'
bot = AsyncTeleBot(API_TOKEN)

propmt_engine = PEngine(model_api, api_key,)


@bot.message_handler(commands=['start', 'help'])
async def send_welcome(message):
    text= "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é."
    await bot.reply_to(message=message, text=text, parse_mode='Markdown')


@bot.message_handler(content_types=['text'])
async def handle_text(message):
    

    wait_text = "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...  üí≠ –ß—Ç–æ-–±–æ—Ç *EvraszGPT* –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
    await bot.send_message(chat_id=message.chat.id, text=wait_text, parse_mode='Markdown')

    try:
        content = propmt_engine.custom_query(message.text)

        await bot.delete_message(message.chat.id, message.message_id+1)
        await bot.send_message(chat_id=message.chat.id, text=content, parse_mode='Markdown')
    except Exception:
        await bot.delete_message(message.chat.id, message.message_id+1)
        await bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def unzip_file(zip_filepath, extract_dir):
    with zipfile.ZipFile(zip_filepath, 'r') as zf:
        zf.extractall(extract_dir)


async def walk_directory(directory: str):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
    tree = {}
    for root, dirs, files in os.walk(directory):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–µ
        current_node = tree
        path_parts = root[len(directory):].strip(os.sep).split(os.sep)
        for part in path_parts:
            if part not in current_node:
                current_node[part] = {}
            current_node = current_node[part]
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
        current_node["files"] = files
    return tree


def is_zip_file(filename):
    if filename[-3:] == 'zip':
        return True
    return False

@bot.message_handler(content_types=['document'])
async def handle_codes(message):
    file_name = message.document.file_name
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    temp_dir = tempfile.mkdtemp(dir='FILES/')
    file_path = os.path.join(temp_dir, file_name)
    with open(file_path, 'wb') as f:
        f.write(downloaded_file)
    
    wait_text = "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...  üí≠ –ß—Ç–æ-–±–æ—Ç *EvraszGPT* –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
    await bot.send_message(chat_id=message.chat.id, text=wait_text, parse_mode='Markdown')

    if not is_zip_file(file_name):
        await bot.delete_message(message.chat.id, message.message_id+1)

        await bot.reply_to(message, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —ç—Ç–æ –Ω–µ *.zip* —Ñ–∞–π–ª")
        await shutil.rmtree(temp_dir, ignore_errors=True) 
    else:
        await bot.delete_message(message.chat.id, message.message_id+1)

        await unzip_file(file_path, temp_dir)
        os.remove(file_path)
        project_file = os.path.join(temp_dir, os.listdir(temp_dir)[0])
        tree = await walk_directory(project_file)
        await bot.reply_to(message, tree)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(bot.polling(none_stop=True))
